// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package Auth.Auth



@SerialVersionUID(0L)
final case class User(
    id: scala.Option[String] = None,
    password: scala.Option[String] = None
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[User] with com.trueaccord.lenses.Updatable[User] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      if (id.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, id.get) }
      if (password.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, password.get) }
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      id.foreach { __v =>
        _output__.writeString(1, __v)
      };
      password.foreach { __v =>
        _output__.writeString(2, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): Auth.Auth.User = {
      var __id = this.id
      var __password = this.password
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __id = Some(_input__.readString())
          case 18 =>
            __password = Some(_input__.readString())
          case tag => _input__.skipField(tag)
        }
      }
      Auth.Auth.User(
          id = __id,
          password = __password
      )
    }
    def getId: String = id.getOrElse("")
    def clearId: User = copy(id = None)
    def withId(__v: String): User = copy(id = Some(__v))
    def getPassword: String = password.getOrElse("")
    def clearPassword: User = copy(password = None)
    def withPassword(__v: String): User = copy(password = Some(__v))
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => id.orNull
        case 2 => password.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => id.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => password.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = Auth.Auth.User
}

object User extends com.trueaccord.scalapb.GeneratedMessageCompanion[Auth.Auth.User] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Auth.Auth.User] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): Auth.Auth.User = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    Auth.Auth.User(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[String]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[String]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[Auth.Auth.User] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      Auth.Auth.User(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[String]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = AuthProto.javaDescriptor.getMessageTypes.get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = AuthProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__fieldNumber)
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = Auth.Auth.User(
  )
  implicit class UserLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, Auth.Auth.User]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, Auth.Auth.User](_l) {
    def id: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getId)((c_, f_) => c_.copy(id = Some(f_)))
    def optionalId: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.id)((c_, f_) => c_.copy(id = f_))
    def password: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getPassword)((c_, f_) => c_.copy(password = Some(f_)))
    def optionalPassword: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.password)((c_, f_) => c_.copy(password = f_))
  }
  final val ID_FIELD_NUMBER = 1
  final val PASSWORD_FIELD_NUMBER = 2
}
